<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>SQL Code Smells</title>
<date>2018-03-15</date>
<author>
<personname>
<firstname>by</firstname>
<othername>Phil</othername>
<surname>Factor</surname>
</personname>
</author>
<authorinitials>bPF</authorinitials>
</info>
<section xml:id="introduction">
<title>Introduction</title>
<simpara>Once you&#8217;ve done a number of SQL code-reviews, you&#8217;ll be able to spot signs in the code that indicate all might not be well. These <link xl:href="http://www.c2.com/cgi/wiki?CodeSmell">'code smells'</link> are coding styles that, while not bugs, suggest design problems with the code.</simpara>
<simpara>Kent Beck and Massimo Arnoldi seem to have coined the term 'Code Smell' in the <link xl:href="http://www.c2.com/cgi/wiki?OnceAndOnlyOnce">'Once And Only Once'</link> page of www.C2.com, where Kent also said that code 'wants to be simple'. Kent Beck and Martin Fowler expand on the issue of code challenges in their essay 'Bad Smells in Code', published as Chapter 3 of the book <emphasis>Refactoring: Improving the Design of Existing Code</emphasis> (ISBN 978-0201485677).</simpara>
<simpara>Although there are generic code smells, SQL has its own particular habits that will alert the programmer to the need to refactor code. (For grounding in code smells in C#, see <link xl:href="https://www.simple-talk.com/dotnet/.net-framework/exploring-smelly-code/">'Exploring Smelly Code'</link> and <link xl:href="https://www.simple-talk.com/dotnet/.net-framework/code-deodorants-for-code-smells/">'Code Deodorants for Code Smells'</link> by Nick Harrison.) Plamen Ratchev&#8217;s wonderful article <link xl:href="https://www.simple-talk.com/sql/t-sql-programming/ten-common-sql-programming-mistakes/'">Ten Common SQL Programming Mistakes'</link> lists some of these code smells along with out-and-out mistakes, but there are more. The use of nested transactions, for example, isn&#8217;t entirely incorrect, even though the database engine ignores all but the outermost, but their use does flag the possibility the programmer thinks that nested transactions are supported.</simpara>
<simpara>If you are moving towards continuous delivery of database applications, you should automate as much as possible the preliminary SQL code-review. It&#8217;s a lot easier to trawl through your code automatically to pick out problems, than to do so manually. Imagine having something like the classic 'lint' tools used for C, or better still, a tool similar to <link xl:href="https://www.simple-talk.com/opinion/geek-of-the-week/peli-de-halleux-geek-of-the-week/">Jonathan 'Peli' de Halleux&#8217;s</link> Code Metrics plug-in for .NET Reflector, which finds code smells in .NET code.</simpara>
<simpara>One can be a bit defensive about SQL code smells. I will cheerfully write very long stored procedures, even though they are frowned upon. I&#8217;ll even use dynamic SQL on occasion. You should use code smells only as an aid. It is fine to 'sign them off' as being inappropriate in certain circumstances. In fact, whole classes of code smells may be irrelevant for a particular database. The use of proprietary SQL, for example, is only a code smell if there is a chance that the database will be ported to another RDBMS. The use of dynamic SQL is a risk only with certain security models. Ultimately, you should rely on your own judgment. As the saying goes, a code smell is a hint of possible bad practice to a pragmatist, but a sure sign of bad practice to a purist.</simpara>
<simpara>In describing all these code-smells in a booklet, I&#8217;ve been very constrained on space to describe each code-small. Some code-smells would require a whole article to explain them properly. Fortunately, SQL Server Central and Simple-Talk have, between them, published material on almost all these code smells, so if you get interested, please explore these essential archives of information.</simpara>
</section>
<section xml:id="problems-with-database-design">
<title>Problems with Database Design</title>
<section xml:id="packing-lists-complex-data-or-other-multivariate-attributes-into-a-table-column">
<title>Packing lists, complex data, or other multivariate attributes into a table column</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/smell1.png"/>
</imageobject>
<textobject><phrase>smell1</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>It is permissible to put a list or data document in a column only if it is, from the database perspective, 'atomic', that is, never likely to be shredded into individual values; in other words, it is fine as long as the value remains in the format in which it started. You should never need to split an 'atomic' value. We can deal with values that contain more than a single item of information: We store strings, after all, and a string is hardly atomic in the sense that it consists of an ordinally significant collection of characters or words. However, the string shouldn&#8217;t represent a list of values. If you need to parse the value of a column to access values within it,  it is likely to need to be normalised, and it will certainly be slow.
Occasionally, a data object is too complicated, peripheral, arcane or ephemeral to be worth integrating with the database&#8217;s normalised structure. It is fair to then take an arm&#8217;s-length approach and store it as XML, but in this case it will need to be encapsulated by views and table-valued functions so that the SQL Programmer can easily access the contents.</simpara>
</section>
<section xml:id="using-inappropriate-data-types">
<title>Using inappropriate data types</title>
<simpara>Although a business may choose to represent a date as a single string of numbers or require codes that mix text with numbers, it is unsatisfactory to store such data in columns that don&#8217;t match the actual data type. This confuses the presentation of data with its storage. Dates, money, codes and other business data can be represented in a human-readable form, the 'presentation' mode, they can be represented in their storage form, or in their data-interchange form. Storing data in the wrong form as strings leads to major issues with coding, indexing, sorting, and other operations. Put the data into the appropriate 'storage' data type at all times.</simpara>
</section>
<section xml:id="storing-the-hierarchy-structure-in-the-same-table-as-the-entities-that-make-up-the-hierarchy">
<title>Storing the hierarchy structure in the same table as the entities that make up the hierarchy</title>
<simpara>Self-referencing tables seem like an elegant way to represent hierarchies. However, such an approach mixes relationships and values. Real-life hierarchies need more than a parent-child relationship. The 'Closure Table' pattern, where the relationships are held in a table separate from the data, is much more suitable for real-life hierarchies. Also, in real life, relationships tend have a beginning and an end, and this often needs to be recorded. The HIERARCHYID data type and the common language runtime (CLR) <emphasis role="strong">SqlHierarchyId</emphasis> class are provided to make tree structures represented by self-referencing tables more efficient, but they are likely to be appropriate for only a minority of applications.</simpara>
</section>
<section xml:id="using-an-entity-attribute-value-eav-model">
<title>Using an Entity Attribute Value (EAV) model</title>
<simpara>The use of an EAV model is almost never justified and leads to very tortuous SQL code that is extraordinarily difficult to apply any sort of constraint to. When faced with providing a 'persistence layer' for an application that doesn&#8217;t understand the nature of the data, use XML instead. That way, you can use XSD to enforce data constraints, create indexes on the data, and use XPath to query specific elements within the XML. It is then, at least, a reliable database, even though it isn&#8217;t relational!</simpara>
</section>
<section xml:id="using-a-polymorphic-association">
<title>Using a polymorphic association</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/Polymorphic.png"/>
</imageobject>
<textobject><phrase>Polymorphic</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Sometimes, one sees table designs which have 'keys' that can reference more than one table, whose identity is usually denoted by a separate column. This is where an entity can relate to one of a number of different entities according to the value in another column that provides the identity of the entity. This sort of relationship cannot be subject to foreign key constraints, and any joins are difficult for the query optimizer to provide good plans for. Also, the logic for the joins is likely to get complicated. Instead, use an intersection table, or if you are attempting an object-oriented mapping, look at the method by which SQL Server represents the database metadata by creating an 'object' supertype class that all of the individual object types extend. Both these devices give you the flexibility of design that polymorphic associations attempt.</simpara>
</section>
<section xml:id="creating-tables-as-god-objects">
<title>Creating tables as 'God Objects'</title>
<simpara>'God Tables' are usually the result of an attempt to encapsulate a large part of the data for the business domain in a single wide table. This is usually a normalization error, or rather, a rash and over-ambitious attempt to 'denormalise' the database structure. If you have a table with many columns, it is likely that you have come to grief on the third normal form. It could also be the result of believing, wrongly, that all joins come at great and constant cost. Normally they can be replaced by views or table-valued functions. Indexed views can have maintenance overhead but are greatly superior to denormalisation.</simpara>
</section>
<section xml:id="contrived-interfaces">
<title>Contrived interfaces</title>
<simpara>Quite often, the database designer will need to create an interface to provide an abstraction layer, between schemas within a database, between database and ETL process, or between a database and application. You face a choice between uniformity, and simplicity. Overly complicated <link xl:href="http://en.wikipedia.org/wiki/Design_pattern_(computer_science)">interfaces</link>, for whatever reason, should never be used where a simpler design would suffice. It is always best to choose simplicity over conformity. Interfaces have to be clearly documented and maintained, let alone understood.</simpara>
</section>
<section xml:id="using-command-line-and-ole-automation-to-access-server-based-resources">
<title>Using command-line and OLE automation to access server-based resources</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/ole.png"/>
</imageobject>
<textobject><phrase>ole</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>In designing a database application, there is sometimes functionality that cannot be done purely in SQL, usually when other server-based, or network-based, resources must be accessed. Now that SQL Server&#8217;s integration with PowerShell is so much more mature, it is better to use that, rather than xp_cmdshell or sp_OACreate (or similar), to access the file system or other server-based resources. This needs some thought and planning: You should also use SQL Agent jobs when possible to schedule your server-related tasks. This requires up-front design to prevent them becoming unmanageable monsters prey to ad-hoc growth.</simpara>
</section>
</section>
<section xml:id="problems-with-table-design">
<title>Problems with Table Design</title>
<section xml:id="using-constraints-to-restrict-values-in-a-column">
<title>Using constraints to restrict values in a column</title>
<simpara>You can use a constraint to restrict the values permitted in a column, but it is usually better to define the values in a separate 'lookup' table and enforce the data restrictions with a foreign key constraint. This makes it much easier to maintain and will also avoid a code-change every time a new value is added to the permitted range, as is the case with constraints.</simpara>
</section>
<section xml:id="not-using-referential-integrity-constraints">
<title>Not using referential integrity constraints</title>
<simpara>One way in which SQL Server maintains data integrity is by using constraints to enforce relationships between tables. The query optimizer can also take advantage of these constraints when constructing query plans. Leaving the constraints off in support of letting the code handle it or avoiding the overhead is a common code smell. It&#8217;s like forgetting to hit the 'turbo' button.</simpara>
</section>
<section xml:id="enabling-nocheck-on-referential-integrity-constraints">
<title>Enabling NOCHECK on referential integrity constraints</title>
<simpara>Some scripting engines disable referential integrity during updates. You must ensure that WITH CHECK is enabled or else the constraint is marked as untrusted and therefore won&#8217;t be used by the optimizer.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp019">BP019- Foreign key is disabled</link></simpara>
</section>
<section xml:id="using-too-many-or-too-few-indexes">
<title>Using too many or too few indexes</title>
<simpara>A table in a well-designed database with an appropriate clustered index will have an optimum number of non-clustered indexes, depending on usage. Indexes incur a cost to the system since they must be maintained if data in the table changes. The presence of duplicate indexes and almost-duplicate indexes is a bad sign. So is the presence of unused indexes. SQL Server lets you create completely redundant and totally duplicate indexes. Sometimes this is done in the mistaken belief that the order of 'included' (non-key) columns is significant. It isn&#8217;t!</simpara>
</section>
<section xml:id="not-choosing-the-most-suitable-clustered-index-for-a-table">
<title>Not choosing the most suitable clustered index for a table</title>
<simpara>You can only have one clustered index on a table, of course, and this choice has a lot of influence on the performance of queries, so you should take care to select wisely.  Are you likely to select predominately single values, unsorted or sorted ranges? Are you predominately using one particular index other than your primary key? Is the table experiencing many more reads than writes, with queries that make reference to columns that aren’t part of the primary key? Are you typically selecting ranges within a particular category? Are your WHERE clauses returning many rows? These ways that the table participates in frequently-used queries are likely to be better accommodated by a clustered index.</simpara>
<simpara>For your clustered index, you are likely to choose a ‘narrow’ index which is stored economically because this value has to be held in every index leaf-level pointer. This can be an interesting trade-off because the clustered index key is automatically included in all non-clustered indexes as the row locator so non-clustered indexes will cover queries that need only the non-clustered index key and the clustered index key.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp001">BP001 Index type is not specified</link></simpara>
</section>
<section xml:id="not-explicitly-declaring-which-index-is-the-clustered-one.">
<title>Not explicitly declaring which index is the clustered one.</title>
<simpara>The primary key is the usual, but not the only, correct choice to be the clustered index. It is seldom wrong to assign a clustered index to a primary key. It is just a problem if your choice of primary key is a ‘fat key’ without natural order that doesn’t work well as a clustered index, or if there is a much better use in the table for that clustered index, such as supporting range scans or avoiding sorts on a frequently-queried candidate key.</simpara>
<simpara>A Clustered index shouldn’t necessarily be frittered away on a surrogate primary key, based on some meaningless ever-increasing integer. Do not be afraid to use the clustered index for another key if it fits better with the way you query the data, and specifically how the table participates in frequently-used queries.You can only have one clustered index on a table, of course, and this choice has a lot of influence on the performance of queries, so you should take care to select wisely. The primary key is the usual, but not the only, correct choice.</simpara>
</section>
<section xml:id="misusing-null-values">
<title>Misusing NULL values</title>
<simpara>The three-value logic required to handle NULL values can cause a problems in reporting, computed values and joins. A NULL value means 'unknown', so any sort of mathematics or concatenation will result in an unknown (NULL) value. Table columns should be nullable only when they really need to be. Although it can be useful to signify that the value of a column is unknown or irrelevant for a particular row, NULLs should be permitted only when they&#8217;re legitimate for the data and application, and fenced around to avoid subsequent problems.</simpara>
</section>
<section xml:id="using-temporary-tables-for-very-small-result-sets">
<title>Using temporary tables for very small result sets</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/Temporal.png"/>
</imageobject>
<textobject><phrase>Temporal</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Temporary tables can lead to recompiles, which can be costly. Table variables, while not so useful for larger data sets (approximately 15000 rows or more), avoid recompiles and are therefore preferred in smaller data sets. Even with huge tables, they can perform well, but only when a clustered index column is used, and when the nature of the processing makes an index seek very effective.</simpara>
<simpara>Table variables behave like other variables in their scoping rules. Once out of scope, they are disposed of without the developer needing to do any explicit cleanup. These are much easier to work with, and pretty secure, and they trigger fewer recompiles in the routines where they’re used than if you were to use temporary tables. Table variables require less locking resources as they are ‘private’ to the batch or process that created them. Transaction rollbacks do not affect them because table variables have limited scope and are not part of the persistent database.</simpara>
<simpara>Where the number of rows in the table is moderate, you can even use them in joins as ‘Heaps’, unindexed. Beware, however, since, as the number of rows increase, joins on Table Variable heaps can easily become saddled by very poor execution plans, and this must be cured either by adding constraints (UNIQUE or PRIMARY KEY) or by adding the OPTION (RECOMPILE) hint if this is impossible. Occasionally, the way that the data is distributed prevents the efficient use of Table Variables, and this will require using a temporary table instead.</simpara>
<simpara>See:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://www.red-gate.com/simple-talk/blogs/table-variables-an-empirical-approach/">Table Variables: an empirical approach.</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.red-gate.com/simple-talk/sql/t-sql-programming/temporary-tables-in-sql-server/">Temporary Tables in SQL Server</link></simpara>
</listitem>
</orderedlist>
<simpara><link xl:href="https://documentation.red-gate.com/scg/sql-code-guard-3-documentation/sql-static-code-analysis-rules/style-rules#Stylerules-ST011ST011%E2%80%93Considerusingtablevariableinsteadoftemporarytable">ST011 – Consider using table variable instead of temporary table</link></simpara>
<simpara><link xl:href="https://documentation.red-gate.com/scg/sql-code-guard-3-documentation/sql-static-code-analysis-rules/style-rules#Stylerules-ST012ST012%E2%80%93Considerusingtemporarytableinsteadoftablevariable">ST012 – Consider using temporary table instead of table variable</link>I</simpara>
</section>
<section xml:id="creating-a-table-without-specifying-a-schema">
<title>Creating a table without specifying a schema</title>
<simpara>If you&#8217;re creating tables from a script, they must, like views and routines, always be defined with two-part names. It is possible for different schemas to contain the same table name, and there are some perfectly legitimate reasons for doing this. Don&#8217;t rely on dbo being the default schema for the login that executes the create script: The default can be changed.</simpara>
<simpara>The user of any database is defaulted to the ‘dbo’ schema, unless explicitly assigned to a different schema. Unless objects are referenced by schema as well as name, they are assumed by the database engine to be in the user’s default schema, and if not there, in the dbo schema.</simpara>
</section>
<section xml:id="most-tables-should-have-a-clustered-index">
<title>Most tables should have a clustered index</title>
<simpara>SQL Server storage is built around the clustered index as a fundamental part of the data storage and retrieval engine. The data itself is stored with the clustered key. All this makes having an appropriate clustered index a vital part of database design. The places where a table without a clustered index is preferable are rare; which is why a missing clustered index is a common code smell in database design.</simpara>
<simpara>A ‘table’ without a clustered index is actually a heap, which is a particularly bad idea when its data is usually returned in an aggregated form, or in a sorted order. Paradoxically, though, it can be rather good for implementing a log or a ‘staging’ table used for bulk inserts, since it is read very infrequently, and there is less overhead in writing to it. A table with a non-clustered index , but without a clustered index can sometimes perform well even though the index has to reference individual rows via a Row Identifier rather than a more meaningful clustered index. The arrangement can be effective for a table that isn’t often updated if the table is always accessed by a non-clustered index and there is no good candidate for a clustered index.</simpara>
</section>
<section xml:id="using-the-same-column-name-in-different-tables-but-with-different-data-types">
<title>Using the same column name in different tables but with different data types</title>
<simpara>Any programmer will assume a sane database design in which columns with the same name in different tables have the same data type. As a result, they probably won&#8217;t verify types. Different types is an accident waiting to happen.</simpara>
</section>
<section xml:id="defining-a-table-column-without-explicitly-specifying-whether-it-is-nullable">
<title>Defining a table column without explicitly specifying whether it is nullable</title>
<simpara>In a CREATE TABLE DDL script, a column definition that has not specified that a column is NULL or NOT NULL is a risk. The default nullability for a database&#8217;s columns can be altered by the 'ANSI_NULL_DFLT_ON' setting. Therefore one cannot assume whether a column will default to NULL or NOT NULL. It is safest to specify it in the column definition for noncomputed columns, and it is essential if you need any portability of your table design. Sparse columns must always allow NULL.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp001">BP001 NOT NULL option is not specified in CREATE/DECLARE TABLE statement (registered once per table)</link></simpara>
</section>
<section xml:id="adding-not-null-column-without-default-value-to-a-table-with-data-will-fail">
<title>Trying to add a NOT NULL column without default value to a table with data</title>
<simpara>Adding a NOT NULL column without a DEFAULT value to an existing table with data in it will fail because SQL Server has no way of adding that column to existing rows, because there must be a value in the column.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei028">EI028 Adding NOT NULL column without default value</link></simpara>
</section>
<section xml:id="creating-dated-copies-of-the-same-table-to-manage-table-sizes">
<title>Creating dated copies of the same table to manage table sizes</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/Dated.png"/>
</imageobject>
<textobject><phrase>Dated</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Now that SQL Server supports table partitioning, it is far better to use partitions than to create dated tables, such as Invoices2012, Invoices2013, etc. If old data is no longer used, archive the data, store only aggregations, or both.</simpara>
</section>
</section>
<section xml:id="problems-with-data-types">
<title>Problems with Data Types</title>
<section xml:id="using-varchar1-varchar2-etc.">
<title>Using VARCHAR(1), VARCHAR(2), etc.</title>
<simpara>Columns of a short or fixed length should have a fixed size because variable-length types have a disproportionate storage overhead. For a large table, this could be significant. The narrow a table, the faster it can be accessed. In addition, columns of variable length are stored after all columns of fixed length, which can have performance implications. For short strings,  use a fixed length type, such as CHAR, NCHAR, and BINARY.</simpara>
<simpara><emphasis role="strong">BP009 Avoid var types of length 1 or 2</emphasis></simpara>
<simpara><link xl:href="https://msdn.microsoft.com/en-us/library/dd193263(v=vs.100).aspx">SR0009: Avoid using types of variable length that are size 1 or 2</link></simpara>
</section>
<section xml:id="declaring-var-type-variables-without-length">
<title>Declaring var type variables without length</title>
<simpara>An VARCHAR, VARBINARY or NVARCHAR that is declared without an explicit length is shorthand for specifying a length of 1. Is this what you meant or did you do it by accident? Much better and safer to be explicit.</simpara>
</section>
<section xml:id="using-deprecated-language-elements-such-as-the-textntext-data-types">
<title>Using deprecated language elements such as the TEXT/NTEXT data types</title>
<simpara>There is no good reason to use TEXT or NTEXT. They were a first, flawed attempt at BLOB storage and are there only for backward compatibility. Likewise, the WRITETEXT, UPDATETEXT and READTEXT statements are also deprecated. All this complexity has been replaced by the VARCHAR(MAX) and NVARCHAR(MAX) data types, which work with all of SQL Server&#8217;s string functions.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep002">DEP002 WRITETEXT,UPDATETEXT and READTEXT statements are deprecated.</link></simpara>
</section>
<section xml:id="using-money-data-type">
<title>Using MONEY data type</title>
<simpara>The MONEY data type confuses the storage of data values with their display, though it clearly suggests, by its name, the sort of data held. Using the DECIMAL data type is almost always better.</simpara>
</section>
<section xml:id="using-float-or-real-data-types">
<title>Using FLOAT or REAL data types</title>
<simpara>The FLOAT (8 byte) and REAL (4 byte) data types are suitable only for specialist scientific use since they are approximate types with an enormous range (-1.79E+308 to -2.23E-308, 0 and 2.23E-308 to 1.79E+308, in the case of FLOAT). Any other use needs to be regarded as suspect, and a FLOAT or REAL used as a key or found in an index needs to be investigated. The DECIMAL type is an exact data type and has an impressive range from -10^38+1 through 10^38-1. Although it requires more storage than the FLOAT or REAL types, it is generally a better choice.</simpara>
</section>
<section xml:id="mixing-parameter-data-types-in-a-coalesce-expression">
<title>Mixing parameter data types in a COALESCE expression</title>
<simpara>The result of the COALESCE expression (which is shorthand for a CASE statement) is the first non-NULL expression in the list of expressions provided as arguments. Mixing data types can result in errors or data truncation.</simpara>
</section>
<section xml:id="using-datetime-or-datetime2-when-youre-concerned-only-with-the-date">
<title>Using DATETIME or DATETIME2 when you&#8217;re concerned only with the date</title>
<simpara>Even with data storage being so cheap, a saving in a data type adds up and makes comparison and calculation easier. When appropriate, use the DATE or SMALLDATETIME type. Narrow tables perform better and use less resources</simpara>
</section>
<section xml:id="using-datetime-or-datetime2-when-youre-merely-recording-the-time-of-day">
<title>Using DATETIME or DATETIME2 when you&#8217;re merely recording the time of day</title>
<simpara>Being parsimonious with memory is important for large tables, not only to save space but also to reduce I/O activity during access. When appropriate, use the TIME or SMALLDATETIME type. Queries too are generally simpler on the appropriate data type.</simpara>
</section>
<section xml:id="using-sql_variant-inappropriately">
<title>Using sql_variant inappropriately</title>
<simpara>The sql_variant type is not your typical data type. It stores values from a number of different data types and is used internally by SQL Server. It is hard to imagine a valid use in a relational database. It cannot be returned to an application via ODBC except as binary data, and it isn&#8217;t supported in Microsoft Azure SQL Database.</simpara>
</section>
<section xml:id="the-length-of-the-varchar-varbinary-and-nvarchar-datatype-in-a-cast-or-convert-clause-wasnt-explicitly-specified">
<title>The length of the VARCHAR, VARBINARY and NVARCHAR datatype in a CAST or CONVERT clause wasn&#8217;t explicitly specified</title>
<simpara>When you convert a datatype to a varchar, you do not have to specify the length. If you don&#8217;t do so, SQL Server will use a Varchar length sufficient to hold the string. It is better to specify the length because SQL Server has no idea what length you may subsequently need.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp008">BP008 CAST/CONVERT to var types without length</link></simpara>
</section>
<section xml:id="storing-a-duration-rather-than-a-point-in-time">
<title>Storing a duration rather than a point in time</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/pointInTime.png"/>
</imageobject>
<textobject><phrase>pointInTime</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>This takes some programmers by surprise. Although it is possible to store a time interval in a table it is not generally a good idea. A time interval is the difference between the start and end of a period of time. You may want to measure this in all sorts of ways, (milliseconds? Quarters? weeks?) and you may subsequently need to deal with all sorts of queries that have to work out what the status was at a particular time (e.g. how many rooms were booked at a particular point in time). By storing the time period as the start and end date-and-time, you leave your options open. If you store the time interval (in what? Seconds?) and maybe the start DateTime, you make subsequent queries more difficult.
It is possible to use a TIME data type if the duration is less than 24 hours, but this is not what the type is intended for, and can be the cause of confusion for the next person who has to maintain your code. They will display very oddly depending on the representation of the time-of-day you use and wrap around every 24 hours!</simpara>
</section>
<section xml:id="using-varcharmax-or-nvarcharmax-when-it-isnt-necessary">
<title>Using VARCHAR(MAX) or NVARCHAR(MAX) when it isn&#8217;t necessary</title>
<simpara>VARCHAR types that specify a number rather than MAX have a finite maximum length and can be stored in-page, whereas MAX types are treated as BLOBS and stored off-page, preventing online re-indexing. Use MAX only when you need more than 8000 bytes (4000 characters for NVARCHAR, 8000 characters for VARCHAR).</simpara>
</section>
<section xml:id="using-varchar-rather-than-nvarchar-for-anything-that-requires-internationalisation-such-as-names-or-addresses">
<title>Using VARCHAR rather than NVARCHAR for anything that requires internationalisation, such as names or addresses</title>
<simpara>You can&#8217;t require everyone to stop using national characters or accents any more. The nineteen-fifties are long gone. Names are likely to have accents in them if spelled properly, and international addresses and language strings will almost certainly have accents and national characters that can&#8217;t be represented by 8-bit ASCII!</simpara>
</section>
<section xml:id="declaring-varchar-varbinary-and-nvarchar-datatypes-without-explicit-length">
<title>Declaring VARCHAR, VARBINARY and NVARCHAR datatypes without explicit length</title>
<simpara>An NVARCHAR that is declared without an explicit length is shorthand for specifying a length of 1. Is this what you meant or did you do it by accident? Much better to be explicit.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp007">BP007 Declaring var type variables without length</link></simpara>
</section>
</section>
<section xml:id="problems-with-expressions">
<title>Problems with expressions</title>
<section xml:id="excessive-use-of-parentheses">
<title>Excessive use of parentheses</title>
<simpara>Some developers use parentheses even when they aren&#8217;t necessary, as a safety net when they&#8217;re not sure of precedence. This makes the code more difficult to maintain and understand.</simpara>
</section>
<section xml:id="using-functions-such-as-isnumeric-without-additional-checks">
<title>Using functions such as 'ISNUMERIC' without additional checks</title>
<simpara>Some functions, such as <literal>ISNUMERIC</literal>, are there to tell you in very general terms whether a string can be converted to a number without an error. Sadly, it doesn&#8217;t tell you what kind of number. (Try <literal>SELECT isNumeric(',')</literal>; or <literal>SELECT ISNUMERIC('4D177')</literal>; for example.) This causes immense confusion. The <literal>ISNUMERIC</literal> function returns 1 when the input expression evaluates to a valid numeric data type; otherwise it returns 0. The function also returns 1 for some characters that are not numbers, such as plus (+), minus (-), and valid currency symbols such as the dollar sign ($). This is legitimate because these can be converted to numbers, but counter-intuitive. Unfortunately, most programmers want to know whether a number is a valid quantity of money, or a float, or integer. Use a function such as <literal>TRY_CAST()</literal> and <literal>TRY_CONVERT()</literal> that is appropriate for the data type whose validity you are testing. E.g. <literal>select try_convert(int,'12,345')</literal> or <literal>select try_convert(float,'5D105')</literal></simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei029">EI029 Avoid using ISNUMERIC() function</link></simpara>
</section>
<section xml:id="injudicious-use-of-the-ltrim-and-rtrim-functions">
<title>Injudicious use of the LTRIM and RTRIM functions</title>
<simpara>These don&#8217;t work as they do in any other computer language. They only trim ASCII space rather than any whitespace character. Use a scalar user-defined function instead.</simpara>
</section>
<section xml:id="using-datalength-rather-than-len-to-find-the-length-of-a-string.">
<title>Using DATALENGTH rather than LEN to find the length of a string.</title>
<simpara>Although using the DATALENGTH function is valid, it can easily give you the wrong results if you&#8217;re unaware of the way it works with the CHAR, NCHAR, or NVARCHAR data types.</simpara>
</section>
<section xml:id="not-using-a-semicolon-to-terminate-sql-statements">
<title>Not using a semicolon to terminate SQL statements</title>
<simpara>Although the lack of semicolons is completely forgivable, it helps to understand more complicated code if individual statements are terminated. With one or two exceptions, such as delimiting the previous statement from a CTE, using semicolons is currently only a decoration, though it is a good habit to adopt to make code more future-proof and portable. When developing code, it is usual add clauses on the end of statements, and in these circumstances, semicolons can be a considerable irritation because they trigger etrrors when they become embedded.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep023">DEP023 Not ending Transact-SQL statements with a semicolon is deprecated</link></simpara>
</section>
<section xml:id="relying-on-data-being-implicitly-converted-between-types">
<title>Relying on data being implicitly converted between types</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/ImplicitlyCoverted.png"/>
</imageobject>
<textobject><phrase>ImplicitlyCoverted</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Implicit conversions can have unexpected results, such as truncating data or reducing performance. It is not always clear in expressions how differences in data types are going to be resolved. If data is implicitly converted in a join operation, the database engine is more likely to build a poor execution plan. More often then not, you should explicitly define your conversions to avoid unintentional consequences.</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd193269(v=vs.100).aspx">SR0014: Data loss might occur when casting from {Type1} to {Type2}</link></simpara>
</section>
<section xml:id="using-the-identity-system-function">
<title>Using the @@IDENTITY system function</title>
<simpara>The generation of an IDENTITY value is not transactional, so in some circumstances, <emphasis role="strong">@@IDENTITY</emphasis> returns the wrong value and not the value from the row you just inserted. This is especially true when using triggers that insert data, depending on when the triggers fire. The <emphasis role="strong">SCOPE_IDENTITY</emphasis> function is safer because it always relates to the current batch (within the same scope). Also consider using the IDENT_CURRENT function, which returns the last IDENTITY value regardless of session or scope. The <emphasis role="strong">OUTPUT</emphasis> clause is a better and safer way of capturing identity values.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp010BP010">Usage of @@identity</link></simpara>
</section>
<section xml:id="using-between-for-datetime-ranges">
<title>Using BETWEEN for DATETIME ranges</title>
<simpara>You never get complete accuracy if you specify dates when using the BETWEEN logical operator with DATETIME values, due to the inclusion of both the date and time values in the range. It is better to first use a date function such as DATEPART to convert the DATETIME value into the necessary granularity (such as day, month, year, day of year) and store this in a column (or columns), then indexed and used as a filtering or grouping value. This can be done by using a persisted computed column to store the required date part as an integer, or via a trigger.</simpara>
</section>
<section xml:id="using-select-in-a-batch">
<title>Using SELECT * in a batch</title>
<simpara>Although there is a legitimate use in a batch for IF EXISTS (SELECT * FROM  &#8230;&#8203; ) or SELECT count(*), any other use is vulnerable to changes in column names or order. SELECT * was designed for interactive use, not as part of a batch. It assumes certain columns in a particular order, which may not last. Also, results should always consist of just the columns you need. Plus, requesting more columns from the database than are used by the application results in excess database I/O and network traffic, leading to slow application response and unhappy users.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp005BP005">Asterisk in select list</link></simpara>
</section>
<section xml:id="insert-without-column-list">
<title>INSERT without column list</title>
<simpara>The INSERT statement need not have a column list, but omitting it assumes certain columns in a particular order. It likely to cause errors if the table in to which the inserts will be made is changed, particularly with table variables where insertions are not checked. Column lists also make code more intelligible</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd193296(v=vs.100).aspx">SR0001: Avoid SELECT * in a batch, stored procedures, views, and table-valued functions</link></simpara>
</section>
<section xml:id="order-by-clause-with-constants">
<title>ORDER BY clause with constants</title>
<simpara>The use of constants in the ORDER BY is deprecated for removal in the future. They make ORDER BY statements more difficult to understand.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp002">BP002 ORDER BY clause with constants</link></simpara>
</section>
</section>
<section xml:id="difficulties-with-query-syntax">
<title>Difficulties with Query Syntax</title>
<section xml:id="creating-uberqueries-god-like-queries">
<title>Creating UberQueries (God-like Queries)</title>
<simpara>Always avoid overweight queries (e.g., a single query with four inner joins, eight left joins, four derived tables, ten subqueries, eight clustered GUIDs, two UDFs and six case statements).</simpara>
</section>
<section xml:id="nesting-views-as-if-they-were-russian-dolls">
<title>Nesting views as if they were Russian dolls</title>
<simpara>Views are important for abstracting the base tables. However, they do not lend themselves to being deeply nested. Views that reference views that reference views that reference views perform poorly and are difficult to maintain. Recommendations vary but I suggest that views relate directly to base tables where possible.</simpara>
</section>
<section xml:id="joins-between-large-views">
<title>Joins between large views</title>
<simpara>Views are like tables in their behaviour, but they can&#8217;t be indexed to support joins. When large views participate in joins, you never get good performance. Instead, either create a view that joins the appropriately indexed base tables, or create indexed temporary tables to contain the filtered rows from the views you wish to 'join'.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/LargeViews.png"/>
</imageobject>
<textobject><phrase>LargeViews</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="using-the-old-sybase-join-syntax">
<title>Using the old Sybase JOIN syntax</title>
<simpara>The deprecated syntax (which includes defining the join condition in the WHERE clause) is not standard SQL and is more difficult to inspect and maintain. Parts of this syntax are completely unsupported in SQL Server 2012 or higher.<anchor xml:id="_Toc395168942" xreflabel="[_Toc395168942]"/></simpara>
<simpara>The “old style” Microsoft/Sybase JOIN style for SQL, which uses the =* and *= syntax, has been deprecated and is no longer used. Queries that use this syntax will fail when the database engine level is 10 (SQL Server 2008) or later (compatibility level 100). The ANSI-89 table citation list (FROM tableA, tableB) is still ISO standard for INNER JOINs only. Neither of these styles are worth using. It is always better to specify the type of join you require, INNER, LEFT OUTER, RIGHT OUTER, FULL OUTER and CROSS, which has been standard since ANSI SQL-92 was published. While you can choose any supported JOIN style, without affecting the query plan used by SQL Server, using the ANSI-standard syntax will make your code easier to understand, more consistent, and portable to other relational database systems.</simpara>
<simpara>See: <link xl:href="https://www.red-gate.com/hub/product-learning/sql-prompt/finding-code-smells-using-sql-prompt-old-style-join-syntax-st001">old-style join syntax</link></simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep017">DEP017 NON-ANSI join (<emphasis role="strong">== or =</emphasis>) is used</link></simpara>
<simpara><emphasis role="strong">ST001 Old-style join is used (&#8230;&#8203;from table1,table2&#8230;&#8203;)</emphasis></simpara>
</section>
<section xml:id="using-correlated-subqueries-instead-of-a-join">
<title>Using correlated subqueries instead of a join</title>
<simpara>Correlated subqueries, queries that run against each returned by the main query, sometimes seem an intuitive approach, but they are merely disguised cursors needed only in exceptional circumstances. Window functions will usually perform the same operations much faster. Most usages of correlated subqueries are accidental and can be replaced with a much simpler and faster JOIN query.</simpara>
</section>
<section xml:id="using-select-rather-than-set-to-assign-values-to-variables">
<title>Using SELECT rather than SET to assign values to variables</title>
<simpara>Using a SELECT statement to assign variable values is not ANSI standard SQL and can result in unexpected results. If you try to assign the result from a single query to a scalar variable, and the query produces several rows, a SELECT statement will return no errors, whereas a SET statement will. On the other hand, if the query returns no rows, the SET statement will assign a NULL to the variable, whereas SELECT will leave the current value of the variable intact.</simpara>
</section>
<section xml:id="using-scalar-user-defined-functions-udfs-for-data-lookups-as-a-poor-mans-join.">
<title>Using scalar user-defined functions (UDFs) for data lookups as a poor man&#8217;s join.</title>
<simpara>It is true that SQL Server provides a number of system functions to simplify joins when accessing metadata, but these are heavily optimised. Using user-defined functions in the same way will lead to very slow queries since they perform much like correlated subqueries.</simpara>
</section>
<section xml:id="not-using-two-part-object-names-for-object-references">
<title>Not using two-part object names for object references</title>
<simpara>The compiler can interpret a two-part object name quicker than just one name. This applies particularly to tables, views, procedures and functions. The same name can be used in different schemas, so it pays to make your queries unambiguous.</simpara>
<simpara>The complete name of any schema-based database object consists of up to four identifiers: the server name, database name, schema name, and object name. Only if you are calling a remote stored procedure would you need a fully qualified name consisting of all four identifiers. If you are calling a procedure in another database, you obviously need its database identifier in the name. Within a database, you only need the object name itself so long as the procedure is in the same schema. By specifying the schema, the database engine needs less searching to identify it. Even system stored procedures should be qualified with the ‘sys’ schema name. When creating a stored procedure as well, it is a good habit to always specify the parent schema.</simpara>
<simpara>It is a very good idea to get into the habit of qualifying the names of procedures with their schema. It is not only makes your code more resilient and maintainable, but as Microsoft introduces new features that use schemas, such as auditing mechanisms, you code contains no ambiguities that could cause problems.</simpara>
<simpara>See:  <link xl:href="https://www.red-gate.com/hub/product-learning/sql-prompt/finding-code-smells-using-sql-prompt-procedures-lack-schema-qualification">procedures that lack schema-qualification</link></simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/performance-rules/pe001">PE001/PE002 Schema name for procedure is not specified/Schema name for table or view is not specified</link></simpara>
</section>
<section xml:id="using-insert-into-without-specifying-the-columns-and-their-order">
<title>Using INSERT INTO without specifying the columns and their order</title>
<simpara>Not specifying column names is fine for interactive work, but if you write code that relies on the hope that nothing will ever change, then refactoring could prove to be impossible. It is much better to trigger an error now than to risk corrupted results after the SQL code has changed. Column lists also make code more intelligible</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp004">BP004 INSERT without column list</link></simpara>
</section>
<section xml:id="using-full-outer-joins-unnecessarily.">
<title>Using full outer joins unnecessarily.</title>
<simpara>It is rare to require both matched and unmatched rows from the two joined tables, especially if you filter out the unmatched rows in the WHERE clause. If what you really need is an inner join, left outer join or right outer join, then use one of those. If you want all rows from both tables, use a cross join.</simpara>
</section>
<section xml:id="including-complex-conditionals-in-the-where-clause">
<title>Including complex conditionals in the WHERE clause</title>
<simpara>It is tempting to produce queries in routines that have complex conditionals in the WHERE clause where variables are used for filtering rows. Usually this is done so that a range of filtering conditions can be passed as parameters to a stored procedure or tale-valued function. If a variable is set to NULL instead of a search term, the OR logic or a COALESCE disables the condition. If this is used in a routine, very different queries are performed according to the combination of parameters used or set to null. As a result, the query optimizer must use table scans, and you end up with slow-running queries that are hard to understand or refactor. This is a variety of UberQuery which is usually found when some complex processing is required to achieve the final result from the filtered rows.</simpara>
</section>
<section xml:id="mixing-data-types-in-joins-or-where-clauses">
<title>Mixing data types in joins or WHERE clauses</title>
<simpara>If you compare or join columns that have different data types, you rely on implicit conversions, which result in a poor execution plans that use table scans. This approach can also lead to errors because no constraints are in place to ensure the data is the correct type.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/MixingDataTypes.png"/>
</imageobject>
<textobject><phrase>MixingDataTypes</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="assuming-that-select-statements-all-have-roughly-the-same-execution-time">
<title>Assuming that SELECT statements all have roughly the same execution time</title>
<simpara>Few programmers admit to this superstition, but it is apparent by the strong preference for hugely long SELECT statements (sometimes called UberQueries). A simple SELECT statement runs in just a few milliseconds. A process runs faster if the individual SQL queries are clear enough to be easily processed by the query optimizer. Otherwise, you will get a poor query plan that performs slowly and won&#8217;t scale.</simpara>
</section>
<section xml:id="not-handling-null-values-in-nullable-columns">
<title>Not handling NULL values in nullable columns</title>
<simpara>Generally, it is wise to explicitly handle NULLs in nullable columns, by using COALESCE to provide a default value. This is especially true when calculating or concatenating the results. (A NULL in part of a concatenated string, for example, will propagate to the entire string. Names and addresses are prone to this sort of error.)</simpara>
<simpara><link xl:href="http://msdn.microsoft.com/en-us/library/dd193267(v=vs.100).aspx">SR0007: Use ISNULL(column, default_value) on nullable columns in expressions</link></simpara>
</section>
<section xml:id="referencing-an-unindexed-column-within-the-in-predicate-of-a-where-clause">
<title>Referencing an unindexed column within the IN predicate of a WHERE clause</title>
<simpara>A WHERE clause that references an unindexed column in the IN predicate causes a table scan and is therefore likely to run far more slowly than necessary.</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd193249(v=vs.100).aspx">SR0004: Avoid using columns that do not have indexes as test expressions in IN predicates</link></simpara>
</section>
<section xml:id="using-like-in-a-where-clause-with-an-initial-wildcard-character">
<title>Using LIKE in a WHERE clause with an initial wildcard character</title>
<simpara>An index cannot be used to find matches that start with a wildcard character ('%' or '_' ), so queries are unlikely to run well on large tables because they&#8217;ll require table scans.</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd193273(v=vs.100).aspx">SR0005: Avoid using patterns that start with a '%' in LIKE predicates</link></simpara>
</section>
<section xml:id="using-a-predicate-or-join-column-as-a-parameter-for-a-user-defined-function">
<title>Using a predicate or join column as a parameter for a user-defined function</title>
<simpara>The query optimizer will not be able to generate a reasonable query plan if the columns in a predicate or join are included as function parameters. The optimizer needs to be able to make a reasonable estimate of the number of rows in an operation in order to effectively run a SQL statement and cannot do so when functions are used on predicate or join columns.</simpara>
</section>
<section xml:id="supplying-object-names-without-specifying-the-schema">
<title>Supplying object names without specifying the schema</title>
<simpara>Object names need only to be unique within a schema. However, when referencing an object in a SELECT, UPDATE, DELETE, MERGE or EXECUTE statements or when calling the OBJECT_ID function, the database engine can find the objects more easily found if the names are qualified with the schema name.</simpara>
<simpara><emphasis role="strong">PE001/PE002 Schema name for procedure is not specified/Schema name for table or view is not specified</emphasis></simpara>
</section>
<section xml:id="using-null-or-null-to-filter-a-nullable-column-for-nulls">
<title>Using '== NULL' or '&lt;&gt; NULL' to filter a nullable column for NULLs</title>
<simpara>An expression that returns a NULL as either the left value (Lvalue) or right value (Rvalue) will always evaluate to NULL. Use IS NULL or IS NOT NULL.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp011">BP011 NULL comparison or addition/substring</link></simpara>
</section>
<section xml:id="not-using-nocount-on-in-stored-procedures-and-triggers">
<title>Not using NOCOUNT ON in stored procedures and triggers</title>
<simpara>Unless you need to return messages that give you the row count of each statement, you should specify the NOCOUNT ON option to explicitly turn off this feature. This option is not likely to be a significant performance factor one way or the other.
Whenever you execute a query, a short message is returned to the client with the number of rows that are affected by that T-SQL statement. When you use SET NOCOUNT ON, this message is not sent. This can improve performance by reducing network traffic slightly. It is best to use SET NOCOUNT ON in SQL Server triggers and stored procedures, unless one or more of the applications using the stored procedures require it to be OFF, because they are reading the value in the message.</simpara>
<simpara>The best approach, generally, is to prevent rowcount messages being sent, unless they are required, but the tricky part is accommodating legacy applications that use, and often misuse, these messages. Additionally, sending these messages can sometimes be a problem for asynchronous processing of procedures by intermediate layers of database applications such as ORMs. The rowcount messages are much slower to be transmitted to the client than the result of the stored procedure, and this can block threads.</simpara>
<simpara>See <link xl:href="https://www.red-gate.com/hub/product-learning/sql-prompt/finding-code-smells-using-sql-prompt-set-nocount-problem-pe008-pe009">the SET NOCOUNT problem</link></simpara>
<simpara><emphasis role="strong">PE009 No SET NOCOUNT ON before DML</emphasis></simpara>
</section>
<section xml:id="using-the-not-in-predicate-in-the-where-clause">
<title>Using the NOT IN predicate in the WHERE clause</title>
<simpara>You&#8217;re queries will often perform poorly if your WHERE clause includes a NOT IN predicate that references a subquery. The optimizer will likely have to use a table scan instead of an index seek, even if there is a suitable index. You can almost always get a better-performing query by using a left outer join and checking for a NULL in a suitable NOT NULLable column on the right-hand side.</simpara>
</section>
<section xml:id="defining-foreign-keys-without-a-supporting-index">
<title>Defining foreign keys without a supporting index</title>
<simpara>Unlike some relational database management systems (RDBMSs), SQL Server does not automatically index a foreign key column, even though an index will likely be needed. It is left to the implementers of the RDBMS as to whether an index is automatically created to support a foreign key constraint. SQL Server chooses not to do so, probably because, if the referenced table is a lookup table with just a few values, an index isn&#8217;t useful. SQL Server also does not mandate a NOT NULL constraint on the foreign key, perhaps to allow rows that aren&#8217;t related to the referenced table.</simpara>
<simpara>Even if you&#8217;re not joining the two tables via the primary and foreign keys, with a table of any size, an index is usually necessary to check changes to PRIMARY KEY constraints against referencing FOREIGN KEY constraints in other tables to verify that changes to the primary key are reflected in the foreign key</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/DefiningForeignKeys.png"/>
</imageobject>
<textobject><phrase>DefiningForeignKeys</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="using-a-non-sargable-search-argument..able-expression-in-a-where-clause">
<title>Using a non-SARGable (Search ARGument..able) expression in a WHERE clause</title>
<simpara>In the WHERE clause of a query it is good to avoid having a column reference or variable embedded within an expression, or used as a parameter of a function. A column reference or variable is best used as a single element on one side of the comparison operator , otherwise it will most probably trigger a table scan, which is expensive in a table of any size.</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd193264(v=vs.100).aspx">SR0006: Move a column reference to one side of a comparison operator to use a column index</link></simpara>
</section>
<section xml:id="including-a-deterministic-function-in-a-where-clause">
<title>Including a deterministic function in a WHERE clause</title>
<simpara>If the value of the function does not depend on the data row that you wish to select, then it is better to put its value in a variable before the SELECT query and use the variable instead.</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd193285(v=vs.100).aspx">SR0015: Extract deterministic function calls from WHERE predicates</link>
<link xl:href="https://documentation.red-gate.com/codeanalysis/performance-rules/pe017">PE017 Incorrect usage of const UDF</link></simpara>
</section>
<section xml:id="_using_an_unverified_scalar_user_defined_function_as_a_constant">
<title>Using an unverified  scalar user-defined function as a constant.</title>
<simpara>The incorrect use of a non-schema bound scalar UDF, as a global database constant, is a major performance problem and must be winkled out of any production code. The problem arises because SQL Server doesn&#8217;t trust non-schema verified scalar functions as being precise and deterministic, and so chooses the safest, though slowest, option when executing them. It&#8217;s a slightly insidious problem because it doesn&#8217;t really show its full significance in the execution plan, though an Extended Events session will reveal what is really going on.</simpara>
<simpara>See: <link xl:href="https://www.red-gate.com/hub/product-learning/sql-prompt/misuse-scalar-user-defined-function-constant-pe017">Misuse of the scalar user-defined function as a constant (PE017)</link></simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/performance-rules/pe017">PE017 Incorrect usage of const UDF</link></simpara>
</section>
<section xml:id="using-select-distinct-to-mask-a-join-problem">
<title>Using SELECT DISTINCT to mask a join problem</title>
<simpara>It is tempting to use SELECT DISTINCT to eliminate duplicate rows in a join. However, it&#8217;s much better to determine why rows are being duplicated and fix the problem.</simpara>
</section>
<section xml:id="using-not-in-with-an-expression-that-allows-null-values">
<title>Using NOT IN with an expression that allows null values</title>
<simpara>If you are using a NOT IN predicate to select only those rows that match the results returned by a subquery or expression, make sure there are no NULL values in those results. Otherwise, your outer query won&#8217;t return the results you expect. In the case of both IN and NOT IN, it is better to use an appropriate outer join.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/performance-rules/pe019">PE019 Consider using NOT EXISTS instead of NOT IN (subquery)</link></simpara>
<simpara>See <link xl:href="https://www.red-gate.com/hub/product-learning/sql-prompt/consider-using-not-exists-instead-not-subquery">Consider using NOT EXISTS instead of NOT IN (subquery)</link></simpara>
</section>
<section xml:id="a-delete-statement-has-omitted-that-where-clause-which-would-delete-the-whole-table">
<title>A DELETE statement has omitted that WHERE clause, which would delete the whole table</title>
<simpara>It is very easy to delete an entire table when you mean to delete just one or more rows. There are occasionally good reasons for using DELETE to clear a table entirely. If you need to clear a table that is involved in replication or log shipping, or a table that has foreign key constraints that reference it, you have no choice. Otherwise, it is more usual to use the TRUNCATE TABLE statement that quickly deletes all records in a table by deallocating the data pages used by the table. The DELETE statement logs the deletions, aand establishes locks whereas the TRUNCATE statement only uses the transaction log to record the page deallocation. It also resets the IDENTITY back to the SEED, and the deallocated pages are recycled.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp017">BP017 DELETE statement without WHERE clause</link></simpara>
</section>
<section xml:id="an-update-statement-has-omitted-the-where-clause-which-would-update-every-row-in-the-table">
<title>An UPDATE statement has omitted the WHERE clause, which would update every row in the table</title>
<simpara>It is very easy to update an entire table, over-writing the data in it, when you mean to update just one or more rows. At the console, Delete or Update statements should also be in a transaction so you can check the result before committing.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp018">BP018 UPDATE statement without WHERE clause</link></simpara>
</section>
<section xml:id="_using_a_common_table_expression_cte_unnecessarily">
<title>Using a Common Table Expression (CTE) unnecessarily</title>
<simpara>CTEs are there to make SQL Statements clearer. They specify a temporary named result set,  derived from a simple query and defined within the execution scope of a single SELECT, INSERT, UPDATE, or DELETE statement. They are convenient to use when an intermediate temporary result needs to be used more than once as a table-source within an expression. It is also useful for recursive statements because a common table expression can include references to itself. However, when neither of these rather rare requirements exist, a CTE becomes unnecessary and does nothing but provide extra overhead. It will slow down the performance.</simpara>
</section>
</section>
<section xml:id="problems-with-naming">
<title>Problems with naming</title>
<section xml:id="excessively-long-or-short-identifiers">
<title>Excessively long or short identifiers</title>
<simpara>Identifiers should help to make SQL readable as if it were English. Short names like t1 or gh might make typing easier but can cause errors and don&#8217;t help teamwork. At the same time, names should be names and not long explanations. Remember that these are names, not documentation. Long names can be frustrating to the person using SQL interactively, unless that person is using SQL Prompt or some other IntelliSense system, through you can&#8217;t rely on it.</simpara>
</section>
<section xml:id="using-sp_-prefixes-for-stored-procedures">
<title>Using sp_ prefixes for stored procedures</title>
<simpara>The sp_ prefix has a special meaning in SQL Server and doesn&#8217;t mean 'stored procedure' but 'special', which tells the database engine to first search the master database for the object.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei024">EI024 Stored procedure name starts with sp_</link></simpara>
</section>
<section xml:id="tibbling-sql-server-objects-with-reverse-hungarian-prefixes-such-as-tbl_-vw_-pk_-fn_-and-usp_">
<title>'Tibbling' SQL Server objects with Reverse-Hungarian prefixes such as tbl_, vw_, pk_, fn_, and usp_</title>
<simpara>SQL names don&#8217;t need prefixes because there isn&#8217;t any ambiguity about what they refer to. 'Tibbling' is a habit that came from databases imported from Microsoft Access.</simpara>
</section>
<section xml:id="using-reserved-words-in-names">
<title>Using reserved words in names</title>
<simpara>Using reserved words makes code more difficult to read, can cause problems to code formatters, and can cause errors when writing code.</simpara>
<simpara><link xl:href="http://msdn.microsoft.com/en-us/library/dd193421(v=vs.100).aspx">SR0012: Avoid using reserved words for type names</link></simpara>
</section>
<section xml:id="including-special-characters-in-object-names">
<title>Including special characters in object names</title>
<simpara>SQL Server supports special character in object names for backward compatibility with older databases such as Microsoft Access, but using these characters in newly created databases causes more problems than they&#8217;re worth. Special characters requires brackets (or double quotations) around the object name, makes code difficult to read, and makes the object more difficult to reference. Avoid particularly using any whitespace characters, square brackets or either double or single quotation marks as part of the object name.</simpara>
<simpara><link xl:href="http://msdn.microsoft.com/en-us/library/dd172134(v=vs.100).aspx">R0011: Avoid using special characters in object names</link></simpara>
</section>
<section xml:id="using-numbers-in-table-names">
<title>Using numbers in table names</title>
<simpara>It should always serve as a warning to see tables named Year1, Year2, Year3 or so on, or even worse, automatically generated names such as tbl3546 or 567Accounts. If the name of the table doesn&#8217;t describe the entity, there is a design problem</simpara>
<simpara>See: <link xl:href="http://msdn.microsoft.com/en-us/library/dd172134(v=vs.100).aspx">SR0011: Avoid using special characters in object names</link></simpara>
</section>
<section xml:id="using-square-brackets-unnecessarily-for-object-names">
<title>Using square brackets unnecessarily for object names</title>
<simpara>If object names are valid and not reserved words, there is no need to use square brackets. Using invalid characters in object names is a code smell anyway, so there is little point in using them. If you can&#8217;t avoid brackets, use them only for invalid names.</simpara>
<simpara><link xl:href="http://msdn.microsoft.com/en-us/library/dd172134(v=vs.100).aspx">SR0011: Avoid using special characters in object names</link></simpara>
</section>
<section xml:id="using-system-generated-object-names-particularly-for-constraints">
<title>Using system-generated object names, particularly for constraints</title>
<simpara>This tends to happen with primary keys and foreign keys if, in the data definition language (DDL), you don&#8217;t supply the constraint name. Auto-generated names are difficult to type and easily confused, and they tend to confuse SQL comparison tools. When installing SharePoint via the GUI, the database names get GUID suffixes, making them very difficult to deal with.</simpara>
</section>
</section>
<section xml:id="problems-with-routines">
<title>Problems with routines</title>
<section xml:id="including-few-or-no-comments">
<title>Including few or no comments</title>
<simpara>Being antisocial is no excuse. Either is being in a hurry. Your scripts should be filled with relevant comments, 30% at a minimum. This is not just to help your colleagues, but also to help you-in-the-future. What seems obvious today will be as clear as mud tomorrow, unless you comment your code properly. In a routine, comments should include intro text in the header as well as examples of usage.</simpara>
</section>
<section xml:id="you-have-a-stored-procedure-that-does-not-return-a-result-code">
<title>You have a stored procedure that does not return a result code</title>
<simpara>When you use the EXECUTE command to execute a stored procedure, or call the stored procedure from an application, an integer is returned that can be assigned to a variable. It is generally used to communicate the success of the operation. It provides a very useful way of reacting to problems in a process and can make a batch process far less convoluted</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp016">BP016 Return without result code</link></simpara>
</section>
<section xml:id="excessively-overloading-routines">
<title>Excessively 'overloading' routines</title>
<simpara>Stored procedures and functions are compiled with query plans. If your routine includes multiple queries and you use a parameter to determine which query to run, the query optimizer cannot come up with an efficient execution plan. Instead, break the code into a series of procedures with one 'wrapper' procedure that determines which of the others to run.</simpara>
</section>
<section xml:id="creating-routines-especially-stored-procedures-as-god-routines-or-uberprocs">
<title>Creating routines (especially stored procedures) as 'God Routines' or 'UberProcs'</title>
<simpara>Occasionally, long routines provide the most efficient way to execute a process, but occasionally they just grow like algae as functionality is added. They are difficult to maintain and likely to be slow. Beware particularly of those with several exit points and different types of result set.</simpara>
</section>
<section xml:id="creating-stored-procedures-that-return-more-than-one-result-set">
<title>Creating stored procedures that return more than one result set</title>
<simpara>Although applications can use stored procedures that return multiple result sets, the results cannot be accessed within SQL. Although they can be used by the application via ODBC, the order of tables will be significant and changing the order of the result sets in a refactoring will then break the application in ways that may not even cause an error, and will be difficult to test automatically from within SQL.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/CreatingStoredProcedures.png"/>
</imageobject>
<textobject><phrase>CreatingStoredProcedures</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="creating-a-multi-statement-table-valued-function-or-a-scalar-function-when-an-inline-function-is-possible">
<title>Creating a Multi-statement table-valued function, or a scalar function when an inline function is possible</title>
<simpara>Inline table-valued Functions run much quicker than a Multi-statement table-valued function, and are also quicker than scalar functions. Obviously, they are only possible where a process can be resolved into a single query.</simpara>
</section>
<section xml:id="too-many-parameters-in-stored-procedures-or-functions">
<title>Too many parameters in stored procedures or functions</title>
<simpara>The general consensus is that a lot of parameters can make a routine unwieldy and prone to errors. You can use table-valued parameters (TVPs) or XML parameters when it is essential to pass data structures or lists into a routine.</simpara>
</section>
<section xml:id="duplicated-code">
<title>Duplicated code</title>
<simpara>This is a generic code smell. If you discover an error in code that has been duplicated, the error needs to be fixed in several places. Although duplication of code In SQL is often a code smell, it is not necessarily so. Duplication is sometimes done intentionally where large result sets are involved because generic routines frequently don&#8217;t perform well. Sometimes quite similar queries require very different execution plans. There is often a trade-off between structure and performance, but sometimes the performance issue is exaggerated. Although you can get a performance hit from using functions and procedures to prevent duplication by encapsulating functionality, it isn&#8217;t often enough to warrant deliberate duplication of code</simpara>
</section>
<section xml:id="high-cyclomatic-complexity">
<title>High cyclomatic complexity</title>
<simpara>Sometimes it is important to have long procedures, maybe with many code routes. However, if a high proportion of your procedures or functions are excessively complex, you&#8217;ll likely have trouble identifying the atomic processes within your application. A high average cyclomatic complexity in routines is a good sign of technical debt.</simpara>
</section>
<section xml:id="using-an-order-by-clause-within-a-view">
<title>Using an ORDER BY clause within a view</title>
<simpara>You cannot use the ORDER BY clause without the TOP clause or the OFFSET &#8230;&#8203; FETCH clause in views (or inline functions, derived tables, or subqueries). Even if you resort to using the TOP 100% trick, the resulting order isn&#8217;t guaranteed. Specify the ORDER BY clause in the query that calls the view.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei030">EI030 Order by in view or single-statement TVF</link></simpara>
</section>
<section xml:id="unnecessarily-using-stored-procedures-or-multiline-table-valued-functions-where-a-view-is-sufficient">
<title>Unnecessarily using stored procedures or multiline table-valued functions where a view is sufficient</title>
<simpara>Stored procedures are not designed for delivering result sets. You can use stored procedures as such with INSERT &#8230;&#8203; EXEC, but you can&#8217;t nest INSERT &#8230;&#8203; EXEC so you&#8217;ll soon run into problems. If you do not need to provide input parameters, then use views, otherwise use inline table valued functions.</simpara>
</section>
<section xml:id="using-cursors">
<title>Using Cursors</title>
<simpara>SQL Server originally supported cursors to more easily port dBase II applications to SQL Server, but even then, you can sometimes use a WHILE loop as an effective substitute. However, modern versions of SQL Server provide window functions and the CROSS/OUTER APPLY syntax to cope with most of the traditional valid uses of the cursor.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/UsingCursors.png"/>
</imageobject>
<textobject><phrase>UsingCursors</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="you-have-not-explicitly-defined-the-scope-of-a-cursor">
<title>You have not explicitly defined the scope of a cursor</title>
<simpara>When you define a cursor with the DECLARE CURSOR statement you can, and should, define the scope of the cursor name. GLOBAL means that the cursor name should be global to the connection. LOCAL specifies that the cursor name is LOCAL to the stored procedure, trigger, or batch containing the DECLARE CURSOR statement.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp015">BP015 Scope of cursor (LOCAL/GLOBAL) is not specified</link></simpara>
</section>
<section xml:id="overusing-clr-routines">
<title>Overusing CLR routines</title>
<simpara>There are many valid uses of CLR routines, but they are often suggested as a way to pass data between stored procedures or to get rid of performance problems. Because of the maintenance overhead, added complexity, and deployment issues associated with CLR routines, it is best to use them only after all SQL-based solutions to a problem have been found wanting or when you cannot use SQL to complete a task.</simpara>
</section>
<section xml:id="excessive-use-of-the-while-loop">
<title>Excessive use of the WHILE loop</title>
<simpara>A WHILE loop is really a type of cursor. Although a WHILE loop can be useful for several inherently procedural tasks, you can usually find a better relational way of achieving the same results. The database engine is heavily optimised to perform set-based operations rapidly. Don&#8217;t fight it!</simpara>
</section>
<section xml:id="relying-on-the-insertexec-statement">
<title>Relying on the INSERT &#8230;&#8203; EXEC statement</title>
<simpara>In a stored procedure, you must use an INSERT &#8230;&#8203; EXEC statement to retrieve data via another stored procedure and insert it into the table targeted by the first procedure. However, you cannot nest this type of statement. In addition, if the referenced stored procedure changes, it can case the first procedure to generate an error.</simpara>
</section>
<section xml:id="stored-procedure-that-does-not-set-a-return-code">
<title>Executing stored procedure without getting result</title>
<simpara>If a stored procedure provides one or more result, the rows will be sent to the client. For large result sets the stored procedure execution will not continue to the next statement until the result set has been completely sent to the client. For small result sets the results will be spooled for return to the client and execution will continue. Within a batch, a stored procedure that returns a result should be called with INSERT &#8230;&#8203;EXECUTE syntax.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei025">EI025 Executing stored procedure without getting result</link></simpara>
</section>
<section xml:id="forgetting-to-set-an-output-variable">
<title>Forgetting to set an output variable</title>
<simpara>The values of the output parameters must be explicitly set in all code paths, otherwise the value of the output variable will be NULL. This can result in the accidental propagation of NULL values. Good defensive coding requires that you initialize the output parameters to a default value at the start of the procedure body.</simpara>
<simpara>See <link xl:href="http://msdn.microsoft.com/en-us/library/dd172136(v=vs.100).aspx">SR0013: Output parameter (parameter) is not populated in all code paths</link></simpara>
</section>
<section xml:id="specifying-parameters-by-order-rather-by-assignment-where-there-are-more-than-four-parameters">
<title>Specifying parameters by order rather by assignment, where there are more than four parameters</title>
<simpara>When calling a stored procedure, it is generally better to pass in parameters by assignment rather than just relying on the order in which the parameters are defined within the procedure. This makes the code easier to understand and maintain. As with all rules, there are exceptions: It doesn&#8217;t really become a problem when there are less than a handful of parameters. Also, natively compiled procedures work fastest by passing in parameters by order.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei018">EI018 Missing parameter(s) name in procedure call</link></simpara>
</section>
<section xml:id="try-to-avoid-using-hardcoded-references-to-other-databases.">
<title>Try to avoid using hardcoded references to other databases.</title>
<simpara>There is nothing wrong in executing procedures in other databases, but it is better to avoid hard-coding these references and use synonyms instead.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei016">EI016 Reference to procedure in other database</link></simpara>
</section>
<section xml:id="use-of-a-hardcoded-current-database-name-in-a-procedure-call">
<title>Use of a Hardcoded current database name in a procedure call</title>
<simpara>You only need to specify the database when calling a procedure in a different database.  It is better to avoid using hardcoded references to the current database as this causes problems if you later do the inconceivable by changing the databases name or cut-and-pasting a routine. There is no performance advantage whatsoever in specifying the current database if the procedure is in the same database.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei017">EI017 Hardcoded current database name in procedure call</link></simpara>
</section>
<section xml:id="setting-the-quoted_identifier-or-ansi_nulls-options-inside-stored-procedures">
<title>Setting the QUOTED_IDENTIFIER or ANSI_NULLS options inside stored procedures</title>
<simpara>Stored procedures use the SET settings specified at execute time, except for SET ANSI_NULLS and SET QUOTED_IDENTIFIER. Stored procedures that specify either the SET ANSI_NULLS or SET QUOTED_IDENTIFIER use the setting specified at stored procedure creation time. If used inside a stored procedure, any such SET command is ignored</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/miscellaneous-rules/mi008">MI008 QUOTED_IDENTIFIERS option inside stored procedure, trigger or function</link></simpara>
</section>
<section xml:id="creating-a-routine-with-ansi_nulls-or-quoted_identifier-options-set-to-off.">
<title>Creating a routine with ANSI_NULLS or QUOTED_IDENTIFIER options set to OFF.</title>
<simpara>At the time the routine is created (parse time), both options should normally be set to ON. They are ignored on execution. The reason for keeping Quoted Identifiers ON is that it is necessary when you are creating or changing indexes on computed columns or indexed views. If set to OFF, then CREATE, UPDATE, INSERT, and DELETE statements on tables with indexes on computed columns or indexed views will fail. SET QUOTED_IDENTIFIER must be ON when you are creating a filtered index or when you invoke XML data type methods. ANSI_NULLS will eventually be set to ON and this ISO compliant treatment of NULLS will not be switchable to OFF.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep028">DEP028 The SQL module was created with ANSI_NULLS and/or QUOTED_IDENTIFIER options set to OFF.</link></simpara>
</section>
<section xml:id="updating-a-primary-key-column">
<title>Updating a primary key column</title>
<simpara>Updating a primary key column is not by itself always bad in moderation. However, the update does come with considerable overhead when maintaining referential integrity. In addition, if the primary key is also a clustered index key, the update generates more overhead in order to maintain the integrity of the table.</simpara>
</section>
<section xml:id="overusing-hints-to-force-a-particular-behaviour-in-joins">
<title>Overusing hints to force a particular behaviour in joins</title>
<simpara>Hints do not take into account the changing number of rows in the tables or the changing distribution of the data between the tables. The query optimizer is generally smarter than you, and a lot more patient.</simpara>
</section>
<section xml:id="using-the-charindex-function-in-a-where-clause">
<title>Using the CHARINDEX function in a WHERE Clause</title>
<simpara>Avoid using CHARINDEX in a WHERE clause to match strings if you can use LIKE (without a leading wildcard expression) to achieve the same results.</simpara>
</section>
<section xml:id="using-the-nolock-hint">
<title>Using the NOLOCK hint</title>
<simpara>Avoid using the NOLOCK hint. It is much better and safer to specify the correct isolation level instead. To use NOLOCK, you would need to be very confident that your code is safe from the possible problems that the other isolation levels protect against. The NOLOCK hint forces the query to use a read uncommitted isolation level, which can result in dirty reads, non-repeatable reads and phantom reads. In certain circumstances, you can sacrifice referential integrity and end up with missing rows or duplicate reads of the same row.</simpara>
</section>
<section xml:id="using-a-waitfor-delaytime-statement-in-a-routine-or-batch">
<title>Using a WAITFOR DELAY/TIME statement in a routine or batch</title>
<simpara>SQL routines or batches are not designed to include artificial delays. If many WAITFOR statements are specified on the same server, too many threads can be tied up waiting. Also, including WAITFOR will delay the completion of the SQL Server process and can result in a timeout message in the application. Sometimes, a transaction that is the victim of a deadlock can be re-executed after a very short delay, and you&#8217;ll find a WAIT used for this, which is legitimate.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/miscellaneous-rules/mi001">MI001 WAIT FOR DELAY/TIME used</link></simpara>
</section>
<section xml:id="using-set-rowcount-to-specify-how-many-rows-should-be-returned">
<title>Using SET ROWCOUNT to specify how many rows should be returned</title>
<simpara>We had to use this option until the TOP clause (with ORDER BY) was implemented. The TOP option is much easier for the query optimizer.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep014">DEP014 SET ROWCOUNT option is deprecated.</link></simpara>
</section>
<section xml:id="using-top-100-percent-in-views-inline-functions-derived-tables-subqueries-and-common-table-expressions-ctes.">
<title>Using TOP 100 PERCENT in views, inline functions, derived tables, subqueries, and common table expressions (CTEs).</title>
<simpara>This is usually a reflex action to seeing the error 'The ORDER BY clause is invalid in views, inline functions, derived tables, subqueries, and common table expressions, unless TOP or FOR XML is also specified'. The message is usually a result of your ORDER BY clause being included in the wrong statement. You should include it only in the outermost query.</simpara>
<programlisting language="sql" linenumbering="unnumbered">CREATE FUNCTION dbo.CurrencyTable(@Region VARCHAR(20) = '%')
--returns the currency for the region, supports wildcards
--SELECT * FROM dbo.CurrencyTable(DEFAULT) returns all
--SELECT * FROM dbo.CurrencyTable('%Slov%')
RETURNS TABLE
WITH SCHEMABINDING
AS
RETURN
  (
  SELECT TOP 100 PERCENT CountryRegion.Name AS country, Currency.Name AS currency
    FROM Person.CountryRegion
      INNER JOIN Sales.CountryRegionCurrency
        ON CountryRegion.CountryRegionCode = CountryRegionCurrency.CountryRegionCode
      INNER JOIN Sales.Currency
        ON CountryRegionCurrency.CurrencyCode = Currency.CurrencyCode
    WHERE CountryRegion.Name LIKE @Region
    ORDER BY Currency.Name
  );
);</programlisting>
</section>
<section xml:id="not-specifying-the-schema-name-for-a-procedure">
<title>Not specifying the Schema name for a procedure</title>
<simpara>Usually, performance is slightly better if you specify the schema, but in certain cases, you need versions of the same stored procedure to be different depending on the user role. You can put different SPs of the same name in different schemas. You then need to specify the stored procedure without the schema because sql server will then choose the stored procedure from the schema associated with the role of the user.</simpara>
</section>
<section xml:id="duplicating-names-of-objects-of-different-types">
<title>Duplicating names of objects of different types</title>
<simpara>Although it is sometimes necessary to use the same name for the same type of object in different schemas, it is never necessary to do it for different object types and it can be very confusing. You would never want a SalesStaff table and SalesStaff view and SalesStaff stored procedure.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/DuplicatingNamesOfObjects.png"/>
</imageobject>
<textobject><phrase>DuplicatingNamesOfObjects</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="using-while-not-done-loops-without-an-error-exit">
<title>Using WHILE (not done) loops without an error exit</title>
<simpara>WHILE loops must always have an error exit. The condition that you set in the WHILE statement may remain true even if the loop is spinning on an error. You can create a deadlock by running a query that includes a WAITFOR statement within a transaction that also holds locks to prevent changes to the rowset that the WAITFOR statement is trying to access.</simpara>
</section>
<section xml:id="using-a-print-statement-or-statement-that-returns-a-result-in-a-trigger">
<title>Using a PRINT statement or statement that returns a result in a trigger</title>
<simpara>Triggers are designed for enforcing data rules, not for returning data or information. Developers often embed PRINT statements in triggers during development to provide a crude idea of how the code is progressing, but the statements need to be removed or commented out before the code is promoted beyond development.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/performance-rules/pe011">PE011 PRINT statement is used in trigger</link></simpara>
</section>
<section xml:id="select-statement-in-trigger-that-returns-data-to-the-client">
<title>SELECT statement in trigger that returns data to the client</title>
<simpara>Although it is possible to do, it is unwise. A trigger should never return data to a client. It is possible to place a SELECT statement in a trigger but it serves no practical useful purpose, and can have unexpected effects. A trigger behaves much like a stored procedure in that, when the trigger fires, results can be returned to the calling application. This requires special handling because these returned results would have to be handled in some way, and this would have to be written into every application in which modifications to the trigger table are allowed.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp003">BP003 SELECT in trigger</link></simpara>
</section>
<section xml:id="using-top-without-order-by">
<title>Using TOP without ORDER BY</title>
<simpara>Using TOP without an ORDER BY clause in a SELECT statement is meaningless and cannot be guaranteed to give consistent results. because asking for the TOP 10 rows implies a certain order, and tables have no implicit logical order.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp006">BP006 TOP without ORDER BY</link></simpara>
</section>
<section xml:id="using-a-case-statement-without-the-else-clause">
<title>Using a CASE statement without the ELSE clause</title>
<simpara>Always specify a default option even if you believe that it is impossible for that condition to happen. Someone might change the logic, or you could be wrong in thinking a particular outcome is impossible.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp012">BP012 CASE without ELSE</link></simpara>
</section>
<section xml:id="using-executestring">
<title>Using EXECUTE(string)</title>
<simpara>Don&#8217;t use EXEC to run dynamic SQL. It is there only for backward compatibility and is a commonly used vector for SQL injection. Use sp_executesql instead because it allows parameter substitutions for both inputs and outputs and also because the execution plan that sp_executesql produces is more likely to be reused.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp013">BP013 EXECUTE(string) is used</link></simpara>
</section>
<section xml:id="using-the-group-by-all-column-group-by-number-compute-or-compute-by-clause">
<title>Using the GROUP BY ALL &lt;column&gt;, GROUP BY &lt;number&gt;, COMPUTE, or COMPUTE BY clause</title>
<simpara>The GROUP BY ALL &lt;column&gt; clause and the GROUP BY &lt;number&gt; clause are deprecated. There are other ways to perform these operations using the standard GROUP BY and GROUPING syntax. The COMPUTE and COMPUTE BY operations were devised for printed summary results. The ROLLUP and CUBE clauses are a better alternative.</simpara>
</section>
<section xml:id="using-numbers-in-the-order-by-clause-to-specify-column-order">
<title>Using numbers in the ORDER BY clause to specify column order</title>
<simpara>It is certainly possible to specify nonnegative integers to represent the columns in an ORDER BY clause, based on how those columns appear in the select list, but this approach makes it difficult to understand the code at a glance and can lead to unexpected consequences when you forget you&#8217;ve done it and alter the order of the columns in the select list.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep003">DEP003 GROUP BY ALL clause is deprecated.</link></simpara>
</section>
<section xml:id="using-unnecessary-three-part-and-four-part-column-references-in-a-select-list">
<title>Using unnecessary three-part and four-part column references in a select list</title>
<simpara>Sometimes, when a table is referenced in another database or server, programmers believe that the two or three-part table name needs to be applied to the columns. This is unnecessary and meaningless. Just the table name is required for the columns. Three-part column names might be necessary in a join if you have duplicate table names, with duplicate column names, in different schemas, in which case, you ought to be using aliases. The same goes for cross-database joins.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/dep026">DEP026 Three-part and four-part column references in SELECT list are deprecated.</link></simpara>
</section>
<section xml:id="using-range-rather-than-rows-in-sql-server-2012">
<title>Using RANGE rather than ROWS in SQL Server 2012</title>
<simpara>The implementation of the RANGE option in a window frame ORDER BY clause is inadequate for any serious use. Stick to the ROWS option whenever possible and try to avoid ordering without framing.</simpara>
</section>
<section xml:id="doing-complex-error-handling-in-a-transaction-before-the-rollback-command">
<title>Doing complex error-handling in a transaction before the ROLLBACK command</title>
<simpara>The database engine releases locks only when the transaction is rolled back or committed. It is unwise to delay this because other processes may be forced to wait. Do any complex error handling after the ROLLBACK command wherever possible.</simpara>
</section>
<section xml:id="use-of-begin-transaction-without-rollback-transaction">
<title>Use of BEGIN TRANSACTION without ROLLBACK TRANSACTION</title>
<simpara>ROLLBACK TRANSACTION rolls back a transaction to the beginning of it, or to a savepoint inside the transaction. You don&#8217;t need a ROLLBACK TRANSACTION statement within a transaction, but if there isn&#8217;t one, then it may be a sign that error handling has not been refined to production standards</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei019">EI019 BEGIN TRANSACTION without ROLLBACK TRANSACTION</link></simpara>
</section>
<section xml:id="use-of-rollback-transaction-without-begin-transaction">
<title>Use of ROLLBACK TRANSACTION without BEGIN TRANSACTION</title>
<simpara>It is possible to have a ROLLBACK TRANSACTION within a block where there is no explicit transaction. This will trigger an error if the code is executed outside a transaction, and suggests that transactions are being held open unnecessarily.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/deprecated-rules/ei020">EI020 ROLLBACK TRANSACTION without BEGIN TRANSACTION</link></simpara>
</section>
<section xml:id="not-defining-a-default-value-for-a-select-assignment-to-a-variable">
<title>Not defining a default value for a SELECT assignment to a variable</title>
<simpara>If an assignment is made to a variable within a SELECT &#8230;&#8203; FROM statement and no result is returned, that variable will retain its current value. If no rows are returned, the variable assignment should be explicit, so you should initialise the variable with a default value.</simpara>
</section>
<section xml:id="not-defining-a-default-value-for-a-set-assignment-that-is-the-result-of-a-query">
<title>Not defining a default value for a SET assignment that is the result of a query</title>
<simpara>If a variable&#8217;s SET assignment is based on a query result and the query returns no rows, the variable is set to NULL. In this case, you should assign a default value to the variable unless you want it to be NULL.</simpara>
</section>
<section xml:id="the-value-of-a-nullable-column-is-not-checked-for-nulls-when-used-in-an-expression">
<title>The value of a nullable column is not checked for NULLs when used in an expression</title>
<simpara>If you are using a nullable column in an expression, you should use a COALESCE or CASE expression or use the ISNULL(<emphasis>column, default_value</emphasis>) function to first verify whether the value is NULL.</simpara>
</section>
<section xml:id="using-the-nullif-expression">
<title>Using the NULLIF expression</title>
<simpara>The NULLIF expression compares two expressions and returns the first one if the two are not equal. If the expressions are equal then NULLIF returns a NULL value of the data type of the first expression. NULLIF is syntactic sugar. Use the CASE statement instead so that ordinary folks can understand what you&#8217;re trying to do. The two are treated identically.</simpara>
</section>
<section xml:id="not-putting-all-the-ddl-statements-at-the-beginning-of-the-batch">
<title>Not putting all the DDL statements at the beginning of the batch</title>
<simpara>Don&#8217;t mix data manipulation language (DML) statements with data definition language (DDL_ statements. Instead, put all the DDL statements at the beginning of your procedures or batches.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/performance-rules/pe010">PE010 Interleaving DDL and DML in stored procedure/trigger.</link></simpara>
</section>
<section xml:id="using-meaningless-aliases-for-tables-e.g.-a-b-c-d-e">
<title>Using meaningless aliases for tables (e.g., a, b, c, d, e)</title>
<simpara>Aliases aren&#8217;t actually meant to cut down on the typing but rather to make your code clearer. To use single characters is antisocial.</simpara>
</section>
<section xml:id="variable-type-is-not-fully-compatible-with-procedure-parameter-type">
<title>Variable type is not fully compatible with procedure parameter type</title>
<simpara>A parameter passed to a procedure or function must be of a type that can be cast into the variable datatype declared for that parameter in the body of the routine. It should be of exactly the same type so as to avoid the extra processing to resolve an implicit conversion.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei001">EI001 Incompatible variable type for procedure call</link></simpara>
</section>
<section xml:id="literal-type-is-not-fully-compatible-with-procedure-parameter-type">
<title>Literal type is not fully compatible with procedure parameter type</title>
<simpara>A parameter passed to a procedure can be a literal (e.g. 1,'03 jun 2017' or 'hello world') but it must be possible to cast it unambiguously to the variable datatype declared for that parameter in the body of the routine.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei002">EI002 Incompatible literal type for procedure call</link></simpara>
</section>
<section xml:id="subquery-may-return-more-than-one-row">
<title>Subquery may return more than one row</title>
<simpara>A subquery can only be scalar, meaning that it can return just one value. Even if you correctly place just one expression in your select list, you must also ensure that just one row is returned. TOP 1 can be used if there is an ORDER BY clause</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei003">EI003 Non-scalar subquery in place of a scalar</link></simpara>
</section>
<section xml:id="a-named-parameter-is-not-found-in-parameter-list-of-a-procedure">
<title>A named parameter is not found in parameter list of a procedure</title>
<simpara>Parameters can be passed by position in a comma-delimited list, or by name, where order position isn&#8217;t required. Any parameters that are specified by name must have the name identical to the definition for that procedure</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei004">EI004 Extra parameter passed</link></simpara>
</section>
<section xml:id="use-of-the-position-notation-after-the-named-notation-for-parameters-when-calling-a-procedure">
<title>Use of the position notation after the named notation for parameters when calling a procedure</title>
<simpara>Parameters can be passed by position in a comma-delimited list, or by name, but it is a bad idea to mix the two methods even when it is possible. If a parameter has a default value assigned to it, it can be left out of the parameter list, and it is difficult to check whether the values you supply are for the parameters you intend.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei005">EI005 Unnamed call after named call</link></simpara>
</section>
<section xml:id="parameter-is-not-passed-to-a-procedure-and-no-default-is-provided.">
<title>Parameter is not passed to a procedure and no default is provided.</title>
<simpara>With procedures and functions, parameters can be assigned default values that are used when a value isn&#8217;t passed for that parameter when calling the procedure. However, if a parameter isn&#8217;t assigned a value and there is no default provided it is an error. If you don&#8217;t want to provide a value and a default is provided, use the DEFAULT keyword to specify that the default value should be used.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei006">EI006 Required parameter is not passed</link></simpara>
</section>
<section xml:id="procedure-parameter-is-not-defined-as-output-but-marked-as-output-in-procedure-call-statement.">
<title>Procedure parameter is not defined as OUTPUT, but marked as OUTPUT in procedure call statement.</title>
<simpara>Output scalar parameters for procedures are passed to the procedure, and can have their value altered within the procedure. This allows procedures to return scalar output. The formal parameter must be declared as an OUTPUT parameter if the actual parameter that is passed had the OUTPUT keyword. This triggers an error.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei007">EI007 Call parameter declared as output</link></simpara>
</section>
<section xml:id="procedure-parameter-is-defined-as-output-but-is-not-marked-as-output-in-procedure-call-statement.">
<title>Procedure parameter is defined as OUTPUT, but is not marked as OUTPUT in procedure call statement.</title>
<simpara>Output scalar parameters for procedures are passed to the procedure, and can have their value altered within the procedure. This allows procedures to return scalar output. However, the matching variable passed as the output parameter in the module or command string must also have the keyword OUTPUT. There is no error but the resultant value is NULL, which you are unlikely to want.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei008">EI008 Call parameter is not declared as output</link></simpara>
</section>
<section xml:id="number-of-passed-parameters-exceeds-the-number-of-procedure-parameters">
<title>Number of passed parameters exceeds the number of procedure parameters</title>
<simpara>Parameters can be passed to procedures and functions in an ordered delimited list, but never more than the number of parameters. For a function, this must have the same number of list members as the parameters. For a procedure you can have fewer if defaults are declared in parameters</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/execution-rules/ei009">EI009 Call has more parameters than required</link></simpara>
</section>
</section>
<section xml:id="security-loopholes">
<title>Security Loopholes</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/SecurityLoopholes.png"/>
</imageobject>
<textobject><phrase>SecurityLoopholes</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="using-sql-server-logins-especially-without-password-expirations-or-windows-password-policy">
<title>Using SQL Server logins, especially without password expirations or Windows password policy</title>
<simpara>Sometimes you must use SQL Server logins. For example, with Microsoft Azure SQL Database, you have no other option, but it isn&#8217;t satisfactory. SQL Server logins and passwords have to be sent across the network and can be read by sniffers. They also require passwords to be stored on client machines and in connection strings. SQL logins are particularly vulnerable to a brute-force attacks. They are also less convenient because the SQL Server Management Studio (SSMS) registered servers don&#8217;t store password information and so can&#8217;t be used for executing SQL across a range of servers. Windows-based authentication is far more robust and should be used where possible.</simpara>
</section>
<section xml:id="using-the-xp_cmdshell-system-stored-procedure">
<title>Using the xp_cmdshell system stored procedure</title>
<simpara>Use xp_cmdshell in a routine only as a last resort, due to the elevated security permissions they require and consequential security risk. The xp_cmdshell procedure is best reserved for scheduled jobs where security can be better managed.</simpara>
</section>
<section xml:id="authentication-set-to-mixed-mode">
<title>Authentication set to Mixed Mode</title>
<simpara>Ensure that Windows Authentication Mode is used wherever possible. SQL Server authentication is necessary only when a server is remote or outside the domain, or if third-party software requires SQL authentication for remote maintenance. Windows Authentication is less vulnerable, and avoids having to transmit passwords over the network or store them in connection strings.</simpara>
</section>
<section xml:id="using-dynamic-sql-without-the-with-execute-as-clause">
<title>Using dynamic SQL without the WITH EXECUTE AS clause</title>
<simpara>Because of ownership chaining and SQL injection risks, dynamic SQL requires constant vigilance to ensure that it is used only as intended. Use the EXECUTE AS clause to ensure the dynamic SQL code inside the procedure is executed only in the context you expect, and use loginless users with just the specific permissions required but no others in the EXECUTE AS clause.</simpara>
</section>
<section xml:id="using-dynamic-sql-with-the-possibility-of-sql-injection">
<title>Using dynamic SQL with the possibility of SQL injection</title>
<simpara>SQL injection can be used not only from an application but also by a database user who lacks, but wants, the permissions necessary to perform a particular role, or who simply wants to access sensitive data. If dynamic SQL is executed within a stored procedure, under the temporary EXECUTE AS permission of a user with sufficient privileges to create users, and it can be accessed by a malicious user, then suitable precautions must be taken to make this impossible. These precautions start with giving EXECUTE AS permissions only to WITHOUT LOGIN users with least-necessary permissions, and using sp_ExecuteSQL with parameters rather than EXECUTE.</simpara>
<simpara><link xl:href="https://documentation.red-gate.com/codeanalysis/best-practice-rules/bp013">BP013 EXECUTE(string) is used</link></simpara>
</section>
</section>
<section xml:id="_acknowledgements">
<title>Acknowledgements</title>
<simpara>For a booklet like this, it is best to go with the
established opinion of what constitutes a SQL
Code Smell. There is little room for creativity. In
order to identify only those SQL coding habits that
could, in some circumstances, lead to problems,
I must rely on the help of experts, and I am very
grateful for the help, support and writings of the
following people in particular.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Dave Howard</simpara>
</listitem>
<listitem>
<simpara>Merrill Aldrich</simpara>
</listitem>
<listitem>
<simpara>Plamen Ratchev</simpara>
</listitem>
<listitem>
<simpara>Dave Levy</simpara>
</listitem>
<listitem>
<simpara>Mike Reigler</simpara>
</listitem>
<listitem>
<simpara>Anil Das</simpara>
</listitem>
<listitem>
<simpara>Adrian Hills</simpara>
</listitem>
<listitem>
<simpara>Sam Stange</simpara>
</listitem>
<listitem>
<simpara>Ian Stirk</simpara>
</listitem>
<listitem>
<simpara>Aaron Bertrand</simpara>
</listitem>
<listitem>
<simpara>Neil Hambly</simpara>
</listitem>
<listitem>
<simpara>Matt Whitfield</simpara>
</listitem>
<listitem>
<simpara>Nick Harrison</simpara>
</listitem>
<listitem>
<simpara>Bill Fellows</simpara>
</listitem>
<listitem>
<simpara>Jeremiah Peschka</simpara>
</listitem>
<listitem>
<simpara>Diane McNurlan</simpara>
</listitem>
<listitem>
<simpara>Robert L Davis</simpara>
</listitem>
<listitem>
<simpara>Dave Ballantyne</simpara>
</listitem>
<listitem>
<simpara>John Stafford</simpara>
</listitem>
<listitem>
<simpara>Alex Kusnetsov</simpara>
</listitem>
<listitem>
<simpara>Gail Shaw</simpara>
</listitem>
<listitem>
<simpara>Jeff Moden</simpara>
</listitem>
<listitem>
<simpara>Joe Celko</simpara>
</listitem>
<listitem>
<simpara>Robert Young</simpara>
</listitem>
</orderedlist>
<simpara>And special thanks to our technical referees, Grant Fritchey and Jonathan Allen.</simpara>
</section>
</article>